import pyglet

# Create a window
window = pyglet.window.Window(width=1200, height=600, caption='Linear Search Visualization')
batch = pyglet.graphics.Batch()

# Generate a list with random numbers ensuring 99 is included
target = 16
numbers = [68, 8, 47, 28, 16, 72, 54]
# Variables to control the animation and search
current_index = 0
found_index = -1
search_complete = False

def move_rectangle(dt):
    global current_index, found_index, search_complete
    if current_index < len(numbers):
        x = current_index * 120 + 200
        y = window.height // 2
        width = 100
        height = 100

        # Draw the rectangles without borders
        for i, number in enumerate(numbers):
            color = (255, 255, 255, 255)  # White for unchecked or passed boxes
            if i == current_index and not search_complete:
                color = (0, 255, 0)  # Green if 16 is found or searched
            elif i == found_index:
                color = (255, 0, 0)  # Red if 16 is found

            pyglet.shapes.Rectangle(x, y, width, height, color=color, batch=batch).draw()

        current_index += 1
        if numbers[current_index - 1] == target:
            found_index = current_index - 1
            search_complete = True

@window.event
def on_draw():
    window.clear()
    pyglet.text.Label('Press R to reset', x=10, y=10, anchor_x='left', anchor_y='bottom',
                      font_name='Arial', font_size=12, color=(255, 255, 255, 255)).draw()

    for i, number in enumerate(numbers):
        # Define the position and size of each 'box'
        x = i * 120 + 200
        y = window.height // 2
        width = 100
        height = 100

        # Draw the rectangles without borders
        color = (255, 255, 255, 255)  # White for unchecked or passed boxes
        if i == current_index and not search_complete:
            color = (0, 255, 0)  # Green if 16 is found or searched
        elif i == found_index:
            color = (255, 0, 0)  # Red if 16 is found

        pyglet.shapes.Rectangle(x, y, width, height, color=color, batch=batch).draw()

        # Draw the number inside the box
        label = pyglet.text.Label(str(number),
                        x=x+width//2,
                        y=y+height//2,
                        anchor_x='center',
                        anchor_y='center',
                        batch=batch,
                        font_name='Impact', font_size=30,
                        color=(0, 0, 0, 255))
        label.draw()

@window.event
def on_key_press(symbol, modifiers):
    if symbol == pyglet.window.key.R:
        reset_search()

def reset_search():
    global current_index, found_index, search_complete
    current_index = 0
    found_index = -1
    search_complete = False

def linear_search(dt):
    global current_index, found_index, search_complete
    if current_index < len(numbers):
        if numbers[current_index] == target:
            found_index = current_index
            search_complete = True
        current_index += 1
    else:
        search_complete = True

# Schedule the movement every 0.2 seconds
pyglet.clock.schedule_interval(move_rectangle, 0.3)

# Schedule the linear search to run every 1 second
pyglet.clock.schedule_interval(linear_search, 1)

pyglet.app.run()
